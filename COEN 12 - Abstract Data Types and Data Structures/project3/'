#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <string.h>
#include <stdbool.h>
#include "set.h"

static int search(SET *p, char *elt, bool *found); 

struct set{
	char** data; 
	int length; 
	int count; 
}; 

SET *createSet(int maxElts)
{
	SET *p = (SET*)malloc(sizeof(SET));
	assert(p != NULL);
	p->length = maxElts; 
	p->count = 0;
	p->data = (char**)malloc(sizeof(char*)*maxElts);
	assert(p->data != NULL); 
	return p;
} 

void destroySet(SET *p)
{
	assert(p != NULL); 
	free(p->data); 
	free(p);  
}

int numElements(SET *p)
{
	assert(p != NULL); 
	return p->count; 
}

void addElement(SET *p, char *elt)
{
	assert(p != NULL && elt != NULL && p->count <= p->length);
	bool find = false;
	int index = search(p, elt, &find); 
	if(find == false)
	{
		for(int i = p->count; i >index; i--)
			p->data[i] = p->data[i-1];
		p->data[index] = strdup(elt); 
		p->count++; 
	}	
}

void removeElement(SET *p , char *elt) 
{
	assert(p!= NULL && elt != NULL); 
	bool find = false; 
	int index = search(p, elt, &find); 
	if(find == false)
		return; 
	for(int i = index; i< p->count; i++)
		p->data[i] = p->data[i+1];
	p->count--; 
}

char *findElement(SET *p, char *elt)
{
	assert(p!= NULL && elt != null);
	bool find = false;
	int index =  search(p, elt, &find); 
	if(find == false)
		return NULL; 
	else 
		return p->data[index];  
}

char **getElement(SET *p)
{
	assert(p!= NULL); 
	char** elements = (char**)malloc(sizeof(char*)*p->count); 
	elements = p->data; 
	return; 
}

static int search(SET *p, char *elt, bool* find)
{
	assert(sp != NULL && elt != NULL);
	int low, high, mid; 
	low = 0; 
	high = p->count-1;
	while(low <= high) 
	{
		mid = (low+high)/2;
		if(strcmp(p->data[mid], elt) <0)
			high = mid-1;
		else if(strcmp(p->data[mid], elt >0)
			low= mid +1;
		else
		{
			*find = true; 
			return mid; 
		}
	}
	*find = false; 
	return low; 
}
